// File: /api/propertyApi.ts

import api from "./config";
// Property interface to define the shape of property data
export interface Property {
  id?: string; // Optional because it will be generated by the backend
  name: string;
  description?: string;
  latitude: number;
  longitude: number;
  price: number;
}

// Fetch all properties
export const getProperties = async (): Promise<Property[]> => {
  try {
    const response = await api.get('/properties');
    return response.data;
  } catch (error) {
    handleApiError(error);
    throw error;
  }
};

// Add a new property
export const addProperty = async (property: Property): Promise<Property> => {
  try {
    const response = await api.post('/properties', property);
    return response.data;
  } catch (error) {
    handleApiError(error);
    throw error;
  }
};

// Update an existing property
export const updateProperty = async (propertyId: string, property: Property): Promise<Property> => {
  try {
    const response = await api.put(`/properties/${propertyId}`, property);
    return response.data;
  } catch (error) {
    handleApiError(error);
    throw error;
  }
};

// Delete a property
export const deleteProperty = async (propertyId: string): Promise<void> => {
  try {
    await api.delete(`/properties/${propertyId}`);
  } catch (error) {
    handleApiError(error);
    throw error;
  }
};

// Handle API errors
const handleApiError = (error: any) => {
  if (axios.isAxiosError(error)) {
    const apiError = error.response?.data || 'An error occurred';
    console.error('API Error:', apiError);
    alert(apiError); // Show alert or handle error appropriately
  } else {
    console.error('Unexpected Error:', error);
  }
};
